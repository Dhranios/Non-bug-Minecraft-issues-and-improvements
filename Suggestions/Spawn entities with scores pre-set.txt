Problem:
When a new entity is spawned, scores cannot be provided in the spawning command, unlike tags and team.
This means that to spawn entities with scores, multiple commands (1+1 per score) must be run, potentially selecting the wrong entity with the latter commands.


Suggested change summary:
Add the optional spawn-read-only NBT (just like the Team string) {scores:{<objective>:<value>,<objective>:{objective:"<objective>",name:"<target>"},<objective>:{objective:"<objective>",nbt:"<path>",<source>}}}


How it works:
On spawning only, the NBT will be read and the scores applied.
The first format simply sets it to a value (scoreboard players set @s <objective> <value>)
The second format simply sets it to another entity's value (scoreboard players operation @s <objective> = <target> <objective>)
When name is @s it refers to the entity being spawned, you should see this as a sign resolving the "score" json text object (it has no @s as its no entity).
The third format simply sets it to an NBT value of a provided source ("storage":"<storage>" or "entity":"<target>" or "block":"<x> <y> <z>")
This is like resolving the "nbt" json text object (again @s refers to the entity being spawned).

Example applied:

Before:
summon zombie ~ ~ ~ {Tags:["special_zombie","target_me"],Team:"Enemies"}
scoreboard players set @e[tag=target_me,limit=1] Time 1
scoreboard players operation @e[tag=target_me,limit=1] PlacementNr = @s PlacementNr
execute store result score @e[tag=target_me,limit=1] Health run data get entity @s Health
tag @e[tag=target_me,limit=1] remove target_me
scoreboard players add @s PlacementNr

After:
tag @s add owner
summon zombie ~ ~ ~ {Tags:["special_zombie"],Team:"Enemies",scores:{Time:1,PlacementNr:{objective:"PlacementNr",name:"@a[tag=owner,limit=1]"},PlacementNr:{objective:"Health",nbt:"Health",entity:"@a[tag=owner,limit=1]"}}}
tag @s remove owner
scoreboard players add @s PlacementNr

Notes:
While the example is not really smaller, for map makers this would be a huge improvement as entities spawned usually have a lot of scores. It also reduces @e usage a lot which is the most resource-intensive selector.
